#!/usr/bin/guile
!#

(import (sph) (sph lang indent-syntax)
  (sph lang scheme) (rnrs exceptions)
  (sph string) (sph list)
  (sph filesystem) (sph alist)
  (sph lang sc) (only (guile) read) (sph stream) (sph conditional) (sph cli))

(define (process input-port output-port check)
  (guard
    (a
      ( (sc-syntax-error? a)
        (raise (append a (list (pair (q port-filename) (port-filename input-port)))))))
    (let
      ( (expressions (pair (q begin) (port->datums input-port)))
        (load-paths
          (pair
            (ensure-trailing-slash
              (if-pass (port-filename input-port) (l (a) (path->full-path (dirname a))) (getcwd)))
            sc-default-load-paths)))
      (if check (debug-log (sc-syntax-check expressions load-paths))
        (display (sc->c expressions load-paths) output-port)))))

(define (with-input-file path c)
  (call-with-input-file path (l (a) (set-port-filename! a path) (c a))))

(define (each-input-file proc paths) (each (l (a) (with-input-file a proc)) paths))

(define* (sc #:optional source-paths target-path parents check) "appends multiple sources"
  (if target-path
    (if parents
      (each
        (l (a)
          (let
            (target-path
              (string-append target-path "/" (string-drop-suffix-if-exists ".sc" a) ".c"))
            (and (ensure-directory-structure (dirname target-path))
              (call-with-output-file target-path
                (l (target-file) (with-input-file a (l (a) (process a target-file check))))))))
        source-paths)
      (call-with-output-file target-path
        (l (target-file) (each-input-file (l (a) (process a target-file check)) source-paths))))
    (if source-paths (each-input-file (l (a) (process a (current-output-port) check)) source-paths)
      (process (current-input-port) (current-output-port) check))))

(define (display-syntax-error a) (display-line "sc syntax error")
  (display-line
    (prefix-tree->indent-tree
      (alist-bind (tail a) (expected irritant port-filename)
        (compact
          (list (and port-filename (string-append "in " (any->string-write port-filename)))
            (and irritant (string-append "at " (any->string-write irritant)))
            (and expected (pair "expected" (map any->string-write expected))))))
      1)))

(define sc-cli
  (let
    (cli
      (cli-create #:help
        (string-join
          (list
            "compiles sc to c. uses standard input/output or files, depending on how many paths have been given."
            "no path: read from standard input and write to standard output"
            "one path: read from standard input and write to standard output"
            "two or more paths: read from all leading paths and write to the last path")
          "\n")
        #:options
        (list-q ((source-path ... target-path)) ((source-path))
          (parents #:description
            "treat target as directory and recreate the directory structure of source files for compiled files")
          (check #:names #\c #:description "only validate syntax"))))
    (l (arguments)
      (alist-bind (cli arguments) (source-path target-path parents check)
        (guard (a ((sc-syntax-error? a) (display-syntax-error a)))
          (sc (if-pass source-path any->list) target-path parents check))))))

(sc-cli (tail (program-arguments)))
