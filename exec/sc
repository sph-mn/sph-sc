#!/usr/bin/guile
!#

(import (sph) (sph filesystem)
  (sph alist) (sph lang sc)
  (only (guile) read) (sph stream) (ice-9 streams) (srfi srfi-1) (sph conditional) (sph cli))

(define (process input-port output-port)
  (display
    (sc->c (pair (q begin) (stream->list (port->stream input-port read)))
      (pair
        (ensure-trailing-slash
          (pass-if (port-filename input-port) (l (a) (path->full-path (dirname a))) (getcwd)))
        sc-default-load-paths))
    output-port))

(define (each-input-file proc paths)
  (each (l (path) (call-with-input-file path (l (a) (set-port-filename! a path) (proc a)))) paths))

(define* (sc #:optional source-path . source+target-path)
  (let*
    ( (target-path (if (null? source+target-path) #f (last source+target-path)))
      (source-path
        (if source-path
          (pair source-path (if target-path (drop-right source+target-path 1) (list))) (list))))
    (if target-path
      (call-with-output-file target-path
        (l (target-file)
          (if (null? source-path) (process (current-input-port) target-file)
            (each-input-file (l (source-file) (process source-file target-file)) source-path))))
      (if (null? source-path) (process (current-input-port) (current-output-port))
        (each-input-file (l (source-file) (process source-file (current-output-port))) source-path)))))

(let
  (options
    ( (cli-create #:help
        (string-join
          (list
            "compiles sc to c. uses standard input/output or files, depending on how many paths have been given."
            "no path: read from standard input and write to standard output"
            "one path: read from standard input and write to file at path"
            "two paths: read from the first path and write to the second path") "\n")
        #:options (q (((paths ...)))))))
  (apply sc (or (alist-ref options (q paths)) (list))))