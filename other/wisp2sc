#!/usr/bin/guile
!#

; this can be used to experiment with using wisp, the whitespace to lisp compiler, and simplify writing sc in it.
; it converts associations with lists that can be typed in wisp without a prefixed dot
; to the flat key/value format expected by the current version of sc, for example (set (a 1) (b 2)) -> (set a 1 b 2).
; it affects set, set+ and similar, array-set, declare, define and pre-define.
; this code depends on the scheme module files from a wisp release to be installed in guiles load path.
; usage:
;   wisp2sc | sc

(import (language wisp) (rnrs io ports)
  (sph) (only (sph tree) tree-transform) (only (sph lang scheme) port->datums))

(define (wisp->sc a)
  (tree-transform a
    (l (a compile)
      (let*
        ( (prefix (first a)) (b (tail a))
          (mapped
            (case prefix ((array-set) (pairs prefix (first b) (apply append (tail b))))
              ((declare pre-define set set+ set- set* set/) (pair prefix (apply append b)))
              ( (define)
                (and (every (l (a) (and (list? a) (= 3 (length a)))) b)
                  (pair prefix (apply append b))))
              (else #f))))
        (list mapped (not mapped))))
    identity identity))

(each write (wisp->sc (wisp-scheme-read-all (current-input-port))))
